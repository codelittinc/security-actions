name: Node.js Security Vulnerability Scanning

on:
  workflow_call:
    inputs:
      project_name:
        description: "Project name for OWASP Dependency Check"
        required: false
        default: "node-project"
        type: string
      node_version:
        description: "Node.js version to use"
        required: false
        default: "18"
        type: string
      fail_on_cvss:
        description: "CVSS score threshold to fail the build"
        required: false
        default: "7"
        type: string
      enable_retired:
        description: "Enable retired CVE checks"
        required: false
        default: true
        type: boolean
      audit_level:
        description: "npm audit level threshold"
        required: false
        default: "moderate"
        type: string
      continue_on_error:
        description: "Continue workflow execution even if security checks fail"
        required: false
        default: false
        type: boolean
      allowed_outdated_libraries:
        description: "Comma-separated list of library names that are allowed to be outdated (e.g., 'typescript,eslint')"
        required: false
        default: ""
        type: string

# Minimal permissions for security scanning
permissions:
  contents: read
  pull-requests: write

jobs:
  security-scan:
    name: Node.js Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=${{ inputs.audit_level }}
        continue-on-error: ${{ inputs.continue_on_error }}

      - name: Run npm outdated check
        run: |
          echo "🔍 Checking for outdated dependencies..."

          # Get the list of allowed outdated libraries
          ALLOWED_LIBS="${{ inputs.allowed_outdated_libraries }}"

          if [ -n "$ALLOWED_LIBS" ]; then
            echo "📋 Libraries allowed to be outdated: $ALLOWED_LIBS"
            
            # Run npm outdated and filter out allowed libraries
            npm outdated --json 2>/dev/null | jq -r --arg allowed "$ALLOWED_LIBS" '
              if . then
                to_entries[] | 
                select(.key | split(",") | any(. == $allowed | split(",")[] | . == .)) | 
                "ALLOWED: \(.key) - Current: \(.value.current) -> Latest: \(.value.latest)"
              else
                empty
              end
            ' || echo "✅ No outdated dependencies found"
            
            # Check for non-allowed outdated libraries
            UNAUTHORIZED_OUTDATED=$(npm outdated --json 2>/dev/null | jq -r --arg allowed "$ALLOWED_LIBS" '
              if . then
                [to_entries[] | 
                select(.key | split(",") | any(. == $allowed | split(",")[] | . == .) | not)] | 
                if length > 0 then
                  .[] | "\(.key) - Current: \(.value.current) -> Latest: \(.value.latest)"
                else
                  empty
                end
              else
                empty
              end
            ')
            
            if [ -n "$UNAUTHORIZED_OUTDATED" ]; then
              echo "❌ UNAUTHORIZED OUTDATED DEPENDENCIES DETECTED:"
              echo "$UNAUTHORIZED_OUTDATED"
              echo ""
              echo "🚨 BUILD FAILED: These dependencies must be updated"
              exit 1
            else
              echo "✅ All outdated dependencies are in the allowed list"
            fi
          else
            echo "📋 No libraries are allowed to be outdated - checking all dependencies"
            npm outdated
          fi
        continue-on-error: ${{ inputs.continue_on_error }}

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: ${{ inputs.project_name }}
          path: "."
          format: "HTML"
          out: "reports"
          args: >
            --failOnCVSS ${{ inputs.fail_on_cvss }}
            --enableRetired ${{ inputs.enable_retired }}
        continue-on-error: ${{ inputs.continue_on_error }}

      - name: Check for High Severity Vulnerabilities
        if: ${{ !inputs.continue_on_error }}
        run: |
          echo "🔍 Checking for high severity vulnerabilities..."

          # Check npm audit for high/critical vulnerabilities
          if npm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
            echo "❌ HIGH SEVERITY VULNERABILITIES DETECTED!"
            echo "npm audit found high or critical vulnerabilities that must be fixed."
            echo ""
            echo "Vulnerability details:"
            npm audit --audit-level=high
            echo ""
            echo "🚨 BUILD FAILED: High severity vulnerabilities detected"
            echo "Please fix these vulnerabilities before proceeding."
            exit 1
          fi

          # Check OWASP report for high CVSS scores
          if [ -f "reports/dependency-check-report.xml" ]; then
            echo "🔍 Checking OWASP report for high CVSS vulnerabilities..."
            
            # Check if there are any vulnerabilities with CVSS >= 7 (high)
            if grep -q 'severity="High"' reports/dependency-check-report.xml 2>/dev/null; then
              echo "❌ HIGH CVSS VULNERABILITIES DETECTED IN OWASP REPORT!"
              echo "OWASP Dependency Check found high severity vulnerabilities."
              echo ""
              echo "🚨 BUILD FAILED: High CVSS vulnerabilities detected"
              echo "Please review the OWASP report and fix high severity issues."
              exit 1
            fi
          fi

          echo "✅ No high severity vulnerabilities detected"

      - name: Upload OWASP report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-report
          path: reports/
          retention-days: 30

      - name: Comment PR with security findings
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Check if npm audit found vulnerabilities
            try {
              const auditResult = await $exec('npm audit --json --audit-level=${{ inputs.audit_level }}');
              const auditData = JSON.parse(auditResult.stdout);
              
              if (auditData.vulnerabilities && Object.keys(auditData.vulnerabilities).length > 0) {
                let comment = '## 🔒 Node.js Security Scan Results\n\n';
                comment += '⚠️ **Vulnerabilities found in dependencies:**\n\n';
                
                for (const [pkg, vuln] of Object.entries(auditData.vulnerabilities)) {
                  comment += `- **${pkg}**: ${vuln.title} (Severity: ${vuln.severity})\n`;
                  comment += `  - Fixed in: ${vuln.fixedIn || 'Not available'}\n`;
                  comment += `  - More info: ${vuln.url}\n\n`;
                }
                
                comment += 'Please review and update vulnerable dependencies.';
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              } else {
                let comment = '## 🔒 Node.js Security Scan Results\n\n✅ **No vulnerabilities found at the configured audit level.**\n\n';
                
                // Add information about allowed outdated libraries if configured
                const allowedLibs = '${{ inputs.allowed_outdated_libraries }}';
                if (allowedLibs && allowedLibs.trim() !== '') {
                  comment += `📋 **Libraries allowed to be outdated:** ${allowedLibs}\n\n`;
                }
                
                comment += 'Note: High severity vulnerabilities will always fail the build regardless of the audit level setting.';
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Error processing npm audit results:', error);
            }

      - name: Security Gate Check
        if: ${{ !inputs.continue_on_error }}
        run: |
          echo "🔒 Final security gate check..."

          # Check if npm audit found vulnerabilities at the configured level
          if npm audit --audit-level=${{ inputs.audit_level }} --json | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
            echo "❌ Security vulnerabilities detected at level '${{ inputs.audit_level }}' - build blocked"
            echo "Please fix the vulnerabilities before proceeding"
            exit 1
          fi

          # Double-check for high severity vulnerabilities (should have been caught earlier, but safety check)
          if npm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
            echo "❌ CRITICAL: High severity vulnerabilities still detected - build blocked"
            echo "This should not happen if previous checks passed. Please investigate."
            exit 1
          fi

          echo "✅ Security gate passed - no vulnerabilities detected"
          echo "✅ Build can proceed safely"
