name: Node.js Security Vulnerability Scanning

on:
  workflow_call:
    inputs:
      project_name:
        description: "Project name for OWASP Dependency Check"
        required: false
        default: "node-project"
        type: string
      node_version:
        description: "Node.js version to use"
        required: false
        default: "18"
        type: string
      fail_on_cvss:
        description: "CVSS score threshold to fail the build"
        required: false
        default: "7"
        type: string
      enable_retired:
        description: "Enable retired CVE checks"
        required: false
        default: true
        type: boolean
      audit_level:
        description: "npm audit level threshold"
        required: false
        default: "moderate"
        type: string
      continue_on_error:
        description: "Continue workflow execution even if security checks fail"
        required: false
        default: false
        type: boolean
      allowed_outdated_libraries:
        description: "Comma-separated list of library names that are allowed to be outdated (e.g., 'typescript,eslint,prettier')"
        required: false
        default: ""
        type: string

# Minimal permissions for security scanning
permissions:
  contents: read
  pull-requests: write

jobs:
  security-scan:
    name: Node.js Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=${{ inputs.audit_level }}
        continue-on-error: ${{ inputs.continue_on_error }}

      - name: Run npm outdated check
        run: |
          echo "üîç Checking for outdated dependencies..."

          # Get the list of allowed outdated libraries
          ALLOWED_LIBS='${{ inputs.allowed_outdated_libraries }}'

          if [ -n "$ALLOWED_LIBS" ]; then
            echo "üìã Libraries allowed to be outdated: $ALLOWED_LIBS"
            
            # Clean up the allowed libraries string (remove spaces, normalize)
            ALLOWED_CLEAN=$(echo "$ALLOWED_LIBS" | tr -d ' ' | tr ',' '\n' | grep -v '^$' | tr '\n' ',' | sed 's/,$//')
            echo "üìã Cleaned allowed libraries: $ALLOWED_CLEAN"
            
            if [ -n "$ALLOWED_CLEAN" ]; then
              # Run npm outdated and filter out allowed libraries
              npm outdated --json 2>/dev/null | jq -r --arg allowed "$ALLOWED_CLEAN" '
                if . then
                  to_entries[] |
                  select(.key | IN($allowed | split(","))) |
                  "ALLOWED: \(.key) - Current: \(.value.current) -> Latest: \(.value.latest)"
                else
                  empty
                end
              ' || echo "‚úÖ No outdated dependencies found"
              
              # Check for non-allowed outdated libraries using a simpler approach
              UNAUTHORIZED_OUTDATED=""
              
              # Use a simpler bash-based approach to filter out allowed libraries
              UNAUTHORIZED_OUTDATED=""
              
              # Get all outdated packages
              npm outdated --json 2>/dev/null > /tmp/all_outdated.json || true
              
              if [ -s /tmp/all_outdated.json ]; then
                # Convert allowed libraries to a format we can use with grep
                ALLOWED_PATTERN=$(echo "$ALLOWED_CLEAN" | tr ',' '|')
                
                # Extract package names that are NOT in the allowed list
                jq -r 'to_entries[] | .key' /tmp/all_outdated.json | grep -vE "^($ALLOWED_PATTERN)$" > /tmp/unauthorized_names.txt || true
                
                if [ -s /tmp/unauthorized_names.txt ]; then
                  # Get full details for unauthorized packages
                  while IFS= read -r pkg; do
                    if [ -n "$pkg" ]; then
                      pkg_info=$(jq -r --arg pkg "$pkg" '.[$pkg] | "\($pkg) - Current: \(.current) -> Latest: \(.latest)"' /tmp/all_outdated.json 2>/dev/null || echo "")
                      if [ -n "$pkg_info" ]; then
                        UNAUTHORIZED_OUTDATED="${UNAUTHORIZED_OUTDATED}${pkg_info}"$'\n'
                      fi
                    fi
                  done < /tmp/unauthorized_names.txt
                  
                  # Remove trailing newline
                  UNAUTHORIZED_OUTDATED=$(echo "$UNAUTHORIZED_OUTDATED" | sed 's/^$//')
                fi
              fi
              
              if [ -n "$UNAUTHORIZED_OUTDATED" ]; then
                echo "‚ùå UNAUTHORIZED OUTDATED DEPENDENCIES DETECTED:"
                echo "$UNAUTHORIZED_OUTDATED"
                echo ""
                echo "üö® BUILD FAILED: These dependencies must be updated"
                
                # Clean up temporary files
                rm -f /tmp/all_outdated.json /tmp/unauthorized_names.txt
                exit 1
              else
                echo "‚úÖ All outdated dependencies are in the allowed list"
                
                # Clean up temporary files
                rm -f /tmp/all_outdated.json /tmp/unauthorized_names.txt
              fi
            else
              echo "üìã No valid library names found in the allowed list"
              npm outdated
            fi
          else
            echo "üìã No libraries are allowed to be outdated - checking all dependencies"
            npm outdated
          fi

          # Clean up any temporary files that might have been left behind
          rm -f /tmp/all_outdated.json /tmp/unauthorized_names.txt /tmp/unauthorized_outdated.txt
        continue-on-error: ${{ inputs.continue_on_error }}

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: ${{ inputs.project_name }}
          path: "."
          format: "HTML"
          out: "reports"
          args: >
            --failOnCVSS ${{ inputs.fail_on_cvss }}
            --enableRetired ${{ inputs.enable_retired }}
        continue-on-error: ${{ inputs.continue_on_error }}

      - name: Check for High Severity Vulnerabilities
        if: ${{ !inputs.continue_on_error }}
        run: |
          echo "üîç Checking for high severity vulnerabilities..."

          # Check npm audit for high/critical vulnerabilities
          if npm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
            echo "‚ùå HIGH SEVERITY VULNERABILITIES DETECTED!"
            echo "npm audit found high or critical vulnerabilities that must be fixed."
            echo ""
            echo "Vulnerability details:"
            npm audit --audit-level=high
            echo ""
            echo "üö® BUILD FAILED: High severity vulnerabilities detected"
            echo "Please fix these vulnerabilities before proceeding."
            exit 1
          fi

          # Check OWASP report for high CVSS scores
          if [ -f "reports/dependency-check-report.xml" ]; then
            echo "üîç Checking OWASP report for high CVSS vulnerabilities..."
            
            # Check if there are any vulnerabilities with CVSS >= 7 (high)
            if grep -q 'severity="High"' reports/dependency-check-report.xml 2>/dev/null; then
              echo "‚ùå HIGH CVSS VULNERABILITIES DETECTED IN OWASP REPORT!"
              echo "OWASP Dependency Check found high severity vulnerabilities."
              echo ""
              echo "üö® BUILD FAILED: High CVSS vulnerabilities detected"
              echo "Please review the OWASP report and fix high severity issues."
              exit 1
            fi
          fi

          echo "‚úÖ No high severity vulnerabilities detected"

      - name: Upload OWASP report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-report
          path: reports/
          retention-days: 30

      - name: Security Gate Check
        if: ${{ !inputs.continue_on_error }}
        run: |
          echo "üîí Final security gate check..."

          # Check if npm audit found vulnerabilities at the configured level
          if npm audit --audit-level=${{ inputs.audit_level }} --json | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
            echo "‚ùå Security vulnerabilities detected at level '${{ inputs.audit_level }}' - build blocked"
            echo "Please fix the vulnerabilities before proceeding"
            exit 1
          fi

          # Double-check for high severity vulnerabilities (should have been caught earlier, but safety check)
          if npm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
            echo "‚ùå CRITICAL: High severity vulnerabilities still detected - build blocked"
            echo "This should not happen if previous checks passed. Please investigate."
            exit 1
          fi

          echo "‚úÖ Security gate passed - no vulnerabilities detected"
          echo "‚úÖ Build can proceed safely"
